{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alexey\\\\Desktop\\\\React on Udemy\\\\01-starting-setup\\\\src\\\\components\\\\Expenses\\\\ExpenseList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport \"./ExpenseList.css\";\nimport Card from \"../UI/Card\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport Spisok from './Spisok';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ExpenseList(props) {\n  _s();\n\n  const [chosenYear, setChosenYear] = useState(\"\");\n\n  const chosenYearHandler = selectedYear => {\n    setChosenYear(selectedYear);\n  };\n\n  const filteredExpenses = props.expenses.filter(item => {\n    return item.date.getFullYear().toString() === chosenYear;\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"expenses\",\n    children: [/*#__PURE__*/_jsxDEV(ExpensesFilter, {\n      selected: chosenYear,\n      onChosenYear: chosenYearHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Spisok, {\n      items: filteredExpenses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ExpenseList, \"q15tBBcBWKy6Z3cLyfZDG2+cQXM=\");\n\n_c = ExpenseList;\nexport default ExpenseList; // We are using the trick with conditional operators here\n// x === 3 ? if true, something happens : otherwise, something else happens\n// We can also store JSX content in variables, like this:\n// let expensesContent = <p> No expenses found </p>;\n// Outside of JSX code we can create such variable, and then conditionally store content in it with usual \"if\"\n// It probably is cleaner\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpenseList\");","map":{"version":3,"sources":["C:/Users/Alexey/Desktop/React on Udemy/01-starting-setup/src/components/Expenses/ExpenseList.js"],"names":["React","useState","Card","ExpensesFilter","Spisok","ExpenseList","props","chosenYear","setChosenYear","chosenYearHandler","selectedYear","filteredExpenses","expenses","filter","item","date","getFullYear","toString"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,mBAAP;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC1B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMQ,iBAAiB,GAAIC,YAAD,IAAkB;AAC1CF,IAAAA,aAAa,CAACE,YAAD,CAAb;AACD,GAFD;;AAIA,QAAMC,gBAAgB,GAAGL,KAAK,CAACM,QAAN,CAAeC,MAAf,CAAuBC,IAAD,IAAU;AACvD,WAAOA,IAAI,CAACC,IAAL,CAAUC,WAAV,GAAwBC,QAAxB,OAAuCV,UAA9C;AACD,GAFwB,CAAzB;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAC,UAAhB;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,QAAQ,EAAEA,UAA1B;AAAsC,MAAA,YAAY,EAAEE;AAApD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAIE;AAAjB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GAjBQN,W;;KAAAA,W;AAmBT,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./ExpenseList.css\";\r\nimport Card from \"../UI/Card\";\r\nimport ExpensesFilter from \"./ExpensesFilter\";\r\nimport Spisok from './Spisok';\r\n\r\nfunction ExpenseList(props) {\r\n  const [chosenYear, setChosenYear] = useState(\"\");\r\n\r\n  const chosenYearHandler = (selectedYear) => {\r\n    setChosenYear(selectedYear);\r\n  };\r\n\r\n  const filteredExpenses = props.expenses.filter((item) => {\r\n    return item.date.getFullYear().toString() === chosenYear;\r\n  });\r\n\r\n  return (\r\n    <Card className=\"expenses\">\r\n      <ExpensesFilter selected={chosenYear} onChosenYear={chosenYearHandler} />\r\n      <Spisok items = {filteredExpenses}/>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ExpenseList;\r\n\r\n// We are using the trick with conditional operators here\r\n// x === 3 ? if true, something happens : otherwise, something else happens\r\n// We can also store JSX content in variables, like this:\r\n// let expensesContent = <p> No expenses found </p>;\r\n// Outside of JSX code we can create such variable, and then conditionally store content in it with usual \"if\"\r\n// It probably is cleaner"]},"metadata":{},"sourceType":"module"}